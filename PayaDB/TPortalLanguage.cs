using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.OpenAccess;

namespace PayaDB
{
    // Generated by Telerik OpenAccess
    // Used template: c:\program files (x86)\telerik\openaccess orm\sdk\IDEIntegrations\templates\PCClassGeneration\cs\templates\classgen\class\partialuserdefault.vm
    // NOTE: Field declarations and 'Object ID' class implementation are added to the 'designer' file.
    //       Changes made to the 'designer' file will be overwritten by the wizard.  	
    public partial class TPortalLanguage
    {
        //The 'no-args' constructor required by OpenAccess. 
        public TPortalLanguage()
        {
        }

        #region Properties

        [Telerik.OpenAccess.FieldAlias("id")]
        public int Id
        {
            get { return id; }
            set { this.id = value; }
        }

        [Telerik.OpenAccess.FieldAlias("enabled")]
        public bool Enabled
        {
            get { return enabled; }
            set { this.enabled = value; }
        }

        [Telerik.OpenAccess.FieldAlias("homeTabID")]
        public int HomeTabID
        {
            get { return homeTabID; }
            set { this.homeTabID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("languageID")]
        public int LanguageID
        {
            get { return languageID; }
            set { this.languageID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("portalID")]
        public int PortalID
        {
            get { return portalID; }
            set { this.portalID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("tLanguage")]
        public TLanguage TLanguage
        {
            get { return tLanguage; }
            set { this.tLanguage = value; }
        }

        [Telerik.OpenAccess.FieldAlias("tPortal")]
        public TPortal TPortal
        {
            get { return tPortal; }
            set { this.tPortal = value; }
        }

        #endregion

        #region Method

        public static int Add(bool enabled, int homeTabIDI, int languageID, int portalID)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                scope.Transaction.Begin();
                var o = new TPortalLanguage
                {
                    Enabled = enabled,
                    HomeTabID = homeTabIDI,
                    LanguageID = languageID,
                    PortalID = portalID
                };
                scope.Add(o);
                scope.Transaction.Commit();

                return int.Parse(scope.GetObjectId(o).ToString());
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return 0;
            }

        }

        public static bool Update(int id, bool enabled, int homeTabIDI, int languageID, int portalID)
        {
            IObjectScope scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TPortalLanguage>().Single(emp => emp.Id == portalID);
                if (o != null)
                {
                    scope.Transaction.Begin();
                    o.Enabled = enabled;
                    o.HomeTabID = homeTabIDI;
                    o.LanguageID = languageID;
                    o.PortalID = portalID;
                    scope.Transaction.Commit();
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static bool Delete(int id)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TPortalLanguage>().Single(emp => emp.Id == id);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static List<TPortalLanguage> GetAll()
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TPortalLanguage>().ToList();
        }

        public static TPortalLanguage GetSingleByID(int portalId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TPortalLanguage>().SingleOrDefault(o => o.PortalID == portalId);

        }

        public static TPortalLanguage GetLanguagePortalByCulture(string currentCulture, int portalId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            var t = scope.Extent<TLanguage>().Single(o => o.Culture == currentCulture);
            return scope.Extent<TPortalLanguage>().Single(o => o.PortalID == portalId && o.LanguageID == t.LanguageID);
        }

        public static List<TPortalLanguage> GetAllEnabledLanguagePortal()
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TPortalLanguage>().Where(o => o.Enabled == true).ToList();
        }

        #endregion

    }
}
