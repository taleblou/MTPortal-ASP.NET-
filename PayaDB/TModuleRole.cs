using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.OpenAccess;

namespace PayaDB
{
    // Generated by Telerik OpenAccess
    // Used template: c:\program files (x86)\telerik\openaccess orm\sdk\IDEIntegrations\templates\PCClassGeneration\cs\templates\classgen\class\partialuserdefault.vm
    // NOTE: Field declarations and 'Object ID' class implementation are added to the 'designer' file.
    //       Changes made to the 'designer' file will be overwritten by the wizard.  	
    public partial class TModuleRole
    {
        //The 'no-args' constructor required by OpenAccess. 
        public TModuleRole()
        {
        }

        #region Properties

        [Telerik.OpenAccess.FieldAlias("moduleRoleID")]
        public int ModuleRoleID
        {
            get { return moduleRoleID; }
            set { this.moduleRoleID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("authID")]
        public int AuthID
        {
            get { return authID; }
            set { this.authID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("moduleID")]
        public int ModuleID
        {
            get { return moduleID; }
            set { this.moduleID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("roleID")]
        public int RoleID
        {
            get { return roleID; }
            set { this.roleID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("tAuthRoleBased")]
        public TAuthRoleBased TAuthRoleBased
        {
            get { return tAuthRoleBased; }
            set { this.tAuthRoleBased = value; }
        }

        [Telerik.OpenAccess.FieldAlias("tModule")]
        public TModule TModule
        {
            get { return tModule; }
            set { this.tModule = value; }
        }

        [Telerik.OpenAccess.FieldAlias("tRole")]
        public TRole TRole
        {
            get { return tRole; }
            set { this.tRole = value; }
        }


        #endregion

        #region Method
        public static int Add(int authID, int moduleID, int roleID)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                scope.Transaction.Begin();
                var o = new TModuleRole
                {
                    AuthID = authID,
                    ModuleID = moduleID,
                    RoleID = roleID
                };
                scope.Add(o);
                scope.Transaction.Commit();

                return int.Parse(scope.GetObjectId(o).ToString());
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return 0;
            }

        }

        public static bool Update(int moduleRoleID, int authID, int moduleID, int roleID)
        {
            IObjectScope scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TModuleRole>().Single(emp => emp.ModuleID == moduleRoleID);
                if (o != null)
                {
                    scope.Transaction.Begin();
                    o.AuthID = authID;
                    o.ModuleID = moduleID;
                    o.RoleID = roleID;
                    scope.Transaction.Commit();
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static bool Delete(int moduleRoleId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TModuleRole>().Single(emp => emp.ModuleRoleID == moduleRoleId);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static bool Delete(int moduleId, int roleId, int authId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TModuleRole>().Single(emp => emp.ModuleID == moduleId && emp.RoleID == roleId && emp.AuthID == authId);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static List<TModuleRole> GetAll()
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TModuleRole>().ToList();
        }

        public static TModuleRole GetSingleByID(int moduleRoleId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TModuleRole>().SingleOrDefault(o => o.ModuleRoleID == moduleRoleId);
        }
        #endregion

    }
}