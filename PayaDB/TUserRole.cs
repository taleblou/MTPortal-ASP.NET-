using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.OpenAccess;

namespace PayaDB
{
    // Generated by Telerik OpenAccess
    // Used template: c:\program files (x86)\telerik\openaccess orm\sdk\IDEIntegrations\templates\PCClassGeneration\cs\templates\classgen\class\partialuserdefault.vm
    // NOTE: Field declarations and 'Object ID' class implementation are added to the 'designer' file.
    //       Changes made to the 'designer' file will be overwritten by the wizard.  	
    public partial class TUserRole
    {
        //The 'no-args' constructor required by OpenAccess. 
        public TUserRole()
        {
        }
        #region Properties :
        [Telerik.OpenAccess.FieldAlias("userRoleID")]
        public int UserRoleID
        {
            get { return userRoleID; }
            set { this.userRoleID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("roleID")]
        public int RoleID
        {
            get { return roleID; }
            set { this.roleID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("userID")]
        public int UserID
        {
            get { return userID; }
            set { this.userID = value; }
        }

        #endregion

        #region Method

        public static bool Update(int userRoleID, int roleID, int userID)
        {
            IObjectScope scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TUserRole>().Single(emp => emp.UserRoleID == userRoleID);
                if (o != null)
                {
                    scope.Transaction.Begin();
                    o.RoleID = roleID;
                    o.UserID = userID;
                    scope.Transaction.Commit();
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static bool Delete(int userRoleID)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TUserRole>().Single(emp => emp.UserRoleID == userRoleID);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }


        public static int Add(int roleID, int userID)
        {
            IObjectScope scopeProvider = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                scopeProvider.Transaction.Begin();
                var user = new TUserRole
                {
                    RoleID = roleID,
                    UserID = userID,
                };
                scopeProvider.Add(user);
                scopeProvider.Transaction.Commit();

                return int.Parse(scopeProvider.GetObjectId(user).ToString());
            }
            catch (Exception)
            {
                if (scopeProvider.Transaction.IsActive)
                    scopeProvider.Transaction.Rollback();
                return 0;
            }
        }

        public static List<TUserRole> GetAll(int userRoleID)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TUserRole>().Where(o => o.UserRoleID == userRoleID).ToList();
        }

        public static List<TUserRole> GetAll()
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TUserRole>().ToList();
        }

        public static TUserRole GetSingleByID(int userID)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TUserRole>().SingleOrDefault(o => o.UserID == userID);
        }

        public static bool Delete(int userID, int rolID)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TUserRole>().Single(emp => emp.UserID == userID && emp.RoleID == rolID);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        #endregion

    }
}
