using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.OpenAccess;

namespace PayaDB
{
    // Generated by Telerik OpenAccess
    // Used template: d:\program files (x86)\telerik\openaccess orm\sdk\IDEIntegrations\templates\PCClassGeneration\cs\templates\classgen\class\partialuserdefault.vm
    // NOTE: Field declarations and 'Object ID' class implementation are added to the 'designer' file.
    //       Changes made to the 'designer' file will be overwritten by the wizard.  	
    public partial class TModuleDefInPortal
    {
        //The 'no-args' constructor required by OpenAccess. 
        public TModuleDefInPortal()
        {
        }

        #region Properties

        [Telerik.OpenAccess.FieldAlias("id")]
        public int Id
        {
            get { return id; }
            set { this.id = value; }
        }

        [Telerik.OpenAccess.FieldAlias("moduleDefID")]
        public int ModuleDefID
        {
            get { return moduleDefID; }
            set { this.moduleDefID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("portalID")]
        public int PortalID
        {
            get { return portalID; }
            set { this.portalID = value; }
        }

        #endregion

        #region Method

        public static bool  Add(int moduleDefId, int PortalId)
        {
            IObjectScope scopeProvider = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                scopeProvider.Transaction.Begin();
                var tab = new TModuleDefInPortal
                {
                    ModuleDefID = moduleDefId,
                    PortalID = PortalId
                };
                scopeProvider.Add(tab);
                scopeProvider.Transaction.Commit();

                return true;
            }
            catch (Exception)
            {
                if (scopeProvider.Transaction.IsActive)
                    scopeProvider.Transaction.Rollback();
                return false;
            }
        }

        public static bool Delete(int moduleDefId, int PortalId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TModuleDefInPortal>().Single(emp => emp.ModuleDefID == moduleDefId && emp.PortalID==PortalId );
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        #endregion



    }
}
