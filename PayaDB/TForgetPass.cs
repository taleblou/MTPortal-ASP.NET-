using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.OpenAccess;

namespace PayaDB
{
    // Generated by Telerik OpenAccess
    // Used template: c:\program files (x86)\telerik\openaccess orm\sdk\IDEIntegrations\templates\PCClassGeneration\cs\templates\classgen\class\partialuserdefault.vm
    // NOTE: Field declarations and 'Object ID' class implementation are added to the 'designer' file.
    //       Changes made to the 'designer' file will be overwritten by the wizard.  	
    public partial class TForgetPass
    {
        //The 'no-args' constructor required by OpenAccess. 
        public TForgetPass()
        {
        }

        [Telerik.OpenAccess.FieldAlias("id")]
        public int Id
        {
            get { return id; }
            set { this.id = value; }
        }

        [Telerik.OpenAccess.FieldAlias("dateSent")]
        public DateTime DateSent
        {
            get { return dateSent; }
            set { this.dateSent = value; }
        }

        [Telerik.OpenAccess.FieldAlias("reqGUID")]
        public Guid ReqGUID
        {
            get { return reqGUID; }
            set { this.reqGUID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("userID")]
        public int UserID
        {
            get { return userID; }
            set { this.userID = value; }
        }

        #region methods

        public static int AddNewRequest(int userid, DateTime datesent)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                scope.Transaction.Begin();
                var o = new TForgetPass()
                            {
                                UserID = userid,
                                DateSent = datesent,
                                ReqGUID = Guid.NewGuid()
                                
                            };
                scope.Add(o);
                scope.Transaction.Commit();

                return int.Parse(scope.GetObjectId(o).ToString());
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return 0;
            }
        }

        public static bool DeleteRequest(int id)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o =
                    scope.Extent<TForgetPass>().Single(
                        emp => emp.id == id);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static TForgetPass GetSingleRequest(Guid reqid)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TForgetPass>().SingleOrDefault(o => o.ReqGUID == reqid);

        }

        public static TForgetPass GetSingleRequestById(int id)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TForgetPass>().SingleOrDefault(o => o.Id == id);
        }

        public static TForgetPass GetSingleRequestByUserId(int userId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TForgetPass>().SingleOrDefault(o => o.UserID == userId);
        }

        #endregion








    }
}
