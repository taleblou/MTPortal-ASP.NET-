using System;
using System.Collections.Generic;
using System.Linq;
using Telerik.OpenAccess;

namespace PayaDB
{
    // Generated by Telerik OpenAccess
    // Used template: c:\program files (x86)\telerik\openaccess orm\sdk\IDEIntegrations\templates\PCClassGeneration\cs\templates\classgen\class\partialuserdefault.vm
    // NOTE: Field declarations and 'Object ID' class implementation are added to the 'designer' file.
    //       Changes made to the 'designer' file will be overwritten by the wizard.  	
    public partial class TLocalResource
    {
        //The 'no-args' constructor required by OpenAccess. 
        public TLocalResource()
        {
        }

        #region Properties

        [Telerik.OpenAccess.FieldAlias("id")]
        public int Id
        {
            get { return id; }
            set { this.id = value; }
        }

        [Telerik.OpenAccess.FieldAlias("languageID")]
        public int LanguageID
        {
            get { return languageID; }
            set { this.languageID = value; }
        }

        [Telerik.OpenAccess.FieldAlias("resourceName")]
        public string ResourceName
        {
            get { return resourceName; }
            set { this.resourceName = value; }
        }

        [Telerik.OpenAccess.FieldAlias("resourceValue")]
        public string ResourceValue
        {
            get { return resourceValue; }
            set { this.resourceValue = value; }
        }

        [Telerik.OpenAccess.FieldAlias("tLanguage")]
        public TLanguage TLanguage
        {
            get { return tLanguage; }
            set { this.tLanguage = value; }
        }

        #endregion

        #region Method

        public static int Add(int languageId, string resourceName, string resourceValue)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                scope.Transaction.Begin();
                var o = new TLocalResource
                {
                    LanguageID = languageId,
                    ResourceName = resourceName,
                    ResourceValue = resourceValue
                };
                scope.Add(o);
                scope.Transaction.Commit();

                return int.Parse(scope.GetObjectId(o).ToString());
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return 0;
            }
        }

        public static bool Delete(int id)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TLocalResource>().Single(emp => emp.Id == id);
                scope.Transaction.Begin();
                scope.Remove(o);
                scope.Transaction.Commit();
                return true;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static List<TLocalResource> GetAll()
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TLocalResource>().ToList();
        }

        public static bool Update(int id, string resourceValue)
        {
            IObjectScope scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TLocalResource>().Single(emp => emp.Id == id);
                if (o != null)
                {
                    scope.Transaction.Begin();
                    o.ResourceValue = resourceValue;
                    scope.Transaction.Commit();
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static bool Update(int languageId, string resourceKey, string resourceValue)
        {
            IObjectScope scope = PayaScopeProvider1.GetNewObjectScope();
            try
            {
                var o = scope.Extent<TLocalResource>().Single(emp => emp.LanguageID == languageId && emp.ResourceName==resourceKey);
                if (o != null)
                {
                    scope.Transaction.Begin();
                    
                    o.resourceValue = resourceValue;
                    scope.Transaction.Commit();
                    return true;
                }
                return false;
            }
            catch (Exception)
            {
                if (scope.Transaction.IsActive)
                    scope.Transaction.Rollback();
                return false;
            }
        }

        public static List<TLocalResource> GetLocaleResourceByLanguageId(int languageId)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TLocalResource>().Where(o => o.LanguageID == languageId).ToList();

        }


        public static TLocalResource GetSingleByID(int id)
        {
            var scope = PayaScopeProvider1.GetNewObjectScope();
            return scope.Extent<TLocalResource>().SingleOrDefault(o => o.Id == id);

        }

        #endregion

    }
}
